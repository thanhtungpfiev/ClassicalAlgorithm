#include <iostream>
#include <queue>
using namespace std;

int N, M, C, D;
int T[100+10];

struct Task
{
	int order;
	int number;
	int value;
	Task(int order1, int number1, int value1) {
		order = order1;
		number = number1;
		value = value1;
	}
};

struct CompareTask
{
	bool operator()(const Task& a, const Task& b) {
		if (a.value == b.value) {
			return a.order > b.order;
		}
		return a.value > b.value;
	}
};

void Input_Data(void){
	cin >> N >> M >> C >> D;	// CPU, number of tasks, number of continuous operations, preparation time
	for(int i=0;i<M;i++)	{
		cin >> T[i];	// Task execution cycle
	}
}

int main(void){
	int ans = 0;

	Input_Data();	// Input function

	// TODO
	priority_queue<Task, vector<Task>, CompareTask> pq;
	for (int i = 0; i < N; ++i) {
		Task t(i, 0, 0);
		pq.push(t);
	}
	for (int i = 0; i < M; ++i) {
		Task t = pq.top();
		// cout << "Begin: " << t.order << " " << t.number << " " << t.value << endl;

		pq.pop();
		t.value += T[i];
		t.number++;
		// if (i == M - 1) {
		// 	// cout << "result: " << t.order << " " << t.number << " " << t.value << endl;
		// 	ans = t.value;
		// 	break;
		// }
		if (t.number == C) {
			t.number = 0;
			t.value += D;
		}
		// cout << "End: " << t.order << " " << t.number << " " << t.value << endl;
		pq.push(t);

	}
	vector<Task> v;
	while (!pq.empty()) {
		Task t = pq.top();
		pq.pop();
		v.push_back(t);
	}
	for (int i = v.size() - 1; i >= 0; --i) {
		Task t = v[i];
		if (t.number != 0) {
			ans = t.value;
			break;
		}
		// cout << "result: " << t.order << " " << t.number << " " << t.value << endl;
	}
	cout << ans << endl;	// Output
	return 0;
}