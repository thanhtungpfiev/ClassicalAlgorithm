Delete Operation for Two Strings
Approach #4 Without using LCS Dynamic Programmming [Accepted]:
Algorithm

Instead of finding the length of LCS and then determining the number of deletions required, we can make use of Dynamic Programming to directly determine the number of deletions required till the current indices of the strings.

In order to do so, we make use of a 2-D dp array. Now, dp[i][j]dp[i][j] refers to the number of deletions required to equalize the two strings if we consider the strings' length upto (i−1)th index and (j−1)th index for s1s1 and s2s2 respectively. Again, we fill in the dpdp array in a row-by-row order. Now, in order to fill the entry for dp[i][j]dp[i][j], we need to consider two cases only:

1. The characters s1[i-1]s1[i−1] and s2[j-1]s2[j−1] match with each other. In this case, we need to replicate the entry corresponding to dp[i-1][j-1]dp[i−1][j−1] itself. This is because, the matched character doesn't need to be deleted from any of the strings.

The characters s1[i-1]s1[i−1] and s2[j-1]s2[j−1] don't match with each other. In this case, we need to delete either the current character of s1s1 or s2s2. Thus, an increment of 1 needs to be done relative to the entries corresponding to the previous indices. The two options available at this moment are dp[i-1][j]dp[i−1][j] and dp[i][j-1]dp[i][j−1]. Since, we are keeping track of the minimum number of deletions required, we pick up the minimum out of these two values.

At the end, dp[m][n]dp[m][n] gives the required minimum number of deletions. Here, mm and nn refer to the lengths of s1s1 and s2s2.